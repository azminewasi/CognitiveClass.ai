shiny::runApp()
install.packages("shiny")
movie <- list("Toy Story", 1995, c("Animation", "Adventure", "Comedy"))
movie
movie[2]
movie <- list(name = "Toy Story",
year = 1995,
genre = c("Animation", "Adventure", "Comedy"))
movie
movie$genre
movie["genre"]
class(movie$name)
class(movie$foreign)
movie[["age"]] <- 6
# We split our previous list in two sublists
movie_part1 <- list(name = "Toy Story")
movie_part2 <- list(year = 1995, genre = c("Animation", "Adventure", "Comedy"))
# Now we call the function c() to put everything together again
movie_concatenated <- c(movie_part1, movie_part2)
# Check it out
movie_concatenated
movies <- data.frame(name = c("Toy Story", "Akira", "The Breakfast Club", "The Artist",
"Modern Times", "Fight Club", "City of God", "The Untouchables"),
year = c(1995, 1998, 1985, 2011, 1936, 1999, 2002, 1987),
stringsAsFactors=F)
movies
movies$name
ls<-NULL
install.packages("RJDBC")
library(dslabs)
install.packages("dslabs")
library(dslabs)
data(murders)
head(murders)
library(dslabs)
install.packages("dslabs")
library(dslabs)
data(murders)
head(murders)
library(dslabs)
data(heights)
names(heights)
type(heights$sex)
head(heights)
library(dslabs)
data(heights)
x <- heights$height
tab<-table(x)
library(dslabs)
data(heights)
x <- heights$height
length(unique(x))
library(dslabs)
data(heights)
x <- heights$height
tab<-table(x)
rm(list = lsf.str())
rm(list = ls.str(mode = 'numeric'))
remove(list = ls())
# load the dataset
library(dslabs)
data(heights)
# make a table of category proportions
prop.table(table(heights$sex))
a <- seq(min(my_data), max(my_data), length = 100)    # define range of values spanning the dataset
cdf_function <- function(x) {    # computes prob. for a single value
mean(my_data <= x)
}
cdf_values <- sapply(a, cdf_function)
plot(a, cdf_values)
# define x as vector of male heights
library(tidyverse)
library(dslabs)
data(heights)
index <- heights$sex=="Male"
x <- heights$height[index]
# calculate the mean and standard deviation manually
average <- sum(x)/length(x)
SD <- sqrt(sum((x - average)^2)/length(x))
# built-in mean and sd functions - note that the audio and printed values disagree
average <- mean(x)
SD <- sd(x)
c(average = average, SD = SD)
# calculate standard units
z <- scale(x)
# calculate proportion of values within 2 SD of mean
mean(abs(z) < 2)
